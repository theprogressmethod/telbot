name: 🚀 Telegram Bot Automated Deployment

on:
  push:
    branches:
      - main           # Production deployment
      - development    # Development deployment
      - staging       # Staging deployment
  
  pull_request:
    branches:
      - main
      - development
  
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deploy)'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'

jobs:
  # ============================================
  # 1. DETECT ENVIRONMENT
  # ============================================
  detect-environment:
    name: 🔍 Detect Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      should_deploy: ${{ steps.detect.outputs.should_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Detect environment
        id: detect
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=test" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Environment Summary
        run: |
          echo "📊 Deployment Configuration:"
          echo "  Environment: ${{ steps.detect.outputs.environment }}"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Will Deploy: ${{ steps.detect.outputs.should_deploy }}"

  # ============================================
  # 2. BACKUP CONFIGURATION
  # ============================================
  backup-config:
    name: 💾 Backup Configuration
    runs-on: ubuntu-latest
    needs: detect-environment
    if: needs.detect-environment.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create backup
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          mkdir -p backups
          
          # Backup current env files
          for env_file in .env.*; do
            if [ -f "$env_file" ]; then
              cp "$env_file" "backups/${env_file}.${TIMESTAMP}"
            fi
          done
          
          # Create backup manifest
          echo "{
            \"timestamp\": \"$TIMESTAMP\",
            \"environment\": \"${{ needs.detect-environment.outputs.environment }}\",
            \"commit\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref_name }}\"
          }" > backups/manifest.json
      
      - name: Upload backup
        uses: actions/upload-artifact@v3
        with:
          name: config-backup-${{ github.run_id }}
          path: backups/
          retention-days: 30

  # ============================================
  # 3. RUN TESTS
  # ============================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: detect-environment
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          # Run tests if they exist
          if [ -d tests ]; then
            pytest tests/ -v || true
          else
            echo "No tests directory found, skipping tests"
          fi

  # ============================================
  # 4. SYNC CONFIGURATION
  # ============================================
  sync-config:
    name: 🔄 Sync Configuration
    runs-on: ubuntu-latest
    needs: [detect-environment, test, backup-config]
    environment: ${{ needs.detect-environment.outputs.environment }}
    if: needs.detect-environment.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Sync environment configuration
        env:
          DEV_BOT_TOKEN: ${{ secrets.DEV_BOT_TOKEN }}
          STAGING_BOT_TOKEN: ${{ secrets.STAGING_BOT_TOKEN }}
          PROD_BOT_TOKEN: ${{ secrets.PROD_BOT_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          ENV="${{ needs.detect-environment.outputs.environment }}"
          
          # Select bot token based on environment
          if [[ "$ENV" == "production" ]]; then
            BOT_TOKEN="${PROD_BOT_TOKEN}"
          elif [[ "$ENV" == "staging" ]]; then
            BOT_TOKEN="${STAGING_BOT_TOKEN}"
          else
            BOT_TOKEN="${DEV_BOT_TOKEN}"
          fi
          
          # Create environment configuration
          cat > .env.$ENV << EOF
          # Auto-generated by GitHub Actions
          ENVIRONMENT=$ENV
          BOT_TOKEN=$BOT_TOKEN
          TELEGRAM_BOT_TOKEN=$BOT_TOKEN
          SUPABASE_URL=$SUPABASE_URL
          SUPABASE_KEY=$SUPABASE_KEY
          OPENAI_API_KEY=$OPENAI_API_KEY
          WEBHOOK_URL=https://telbot-$ENV.onrender.com/webhook
          HOST=0.0.0.0
          PORT=8000
          EOF
          
          echo "✅ Configuration synced for $ENV environment"
      
      - name: Commit configuration changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .env.${{ needs.detect-environment.outputs.environment }} || true
          git diff --staged --quiet || git commit -m "Auto-sync: Update ${{ needs.detect-environment.outputs.environment }} configuration"
        continue-on-error: true

  # ============================================
  # 5. DEPLOY TO RENDER
  # ============================================
  deploy:
    name: 🚀 Deploy to Render
    runs-on: ubuntu-latest
    needs: [detect-environment, sync-config]
    environment: ${{ needs.detect-environment.outputs.environment }}
    if: needs.detect-environment.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy via Render Hook
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets[format('RENDER_DEPLOY_HOOK_{0}', needs.detect-environment.outputs.environment)] }}
        run: |
          if [ -n "$RENDER_DEPLOY_HOOK" ]; then
            curl -X POST "$RENDER_DEPLOY_HOOK"
            echo "✅ Deployment triggered for ${{ needs.detect-environment.outputs.environment }}"
          else
            echo "⚠️ No deploy hook configured for ${{ needs.detect-environment.outputs.environment }}"
          fi
      
      - name: Wait for deployment
        run: sleep 60

  # ============================================
  # 6. VERIFY DEPLOYMENT
  # ============================================
  verify:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: [detect-environment, deploy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check service health
        run: |
          ENV="${{ needs.detect-environment.outputs.environment }}"
          URL="https://telbot-$ENV.onrender.com/health"
          
          # Try health check multiple times
          for i in {1..5}; do
            if curl -f -s "$URL"; then
              echo "✅ Service is healthy!"
              exit 0
            fi
            echo "Attempt $i/5 failed, waiting..."
            sleep 30
          done
          
          echo "❌ Health check failed"
          exit 1
      
      - name: Verify bot webhook
        env:
          DEV_BOT_TOKEN: ${{ secrets.DEV_BOT_TOKEN }}
          STAGING_BOT_TOKEN: ${{ secrets.STAGING_BOT_TOKEN }}
          PROD_BOT_TOKEN: ${{ secrets.PROD_BOT_TOKEN }}
        run: |
          ENV="${{ needs.detect-environment.outputs.environment }}"
          
          # Select bot token
          if [[ "$ENV" == "production" ]]; then
            BOT_TOKEN="${PROD_BOT_TOKEN}"
          elif [[ "$ENV" == "staging" ]]; then
            BOT_TOKEN="${STAGING_BOT_TOKEN}"
          else
            BOT_TOKEN="${DEV_BOT_TOKEN}"
          fi
          
          # Check webhook
          WEBHOOK_INFO=$(curl -s "https://api.telegram.org/bot$BOT_TOKEN/getWebhookInfo")
          echo "Webhook info: $WEBHOOK_INFO"
          
          if echo "$WEBHOOK_INFO" | grep -q '"ok":true'; then
            echo "✅ Bot webhook verified"
          else
            echo "⚠️ Bot webhook verification failed"
          fi

  # ============================================
  # 7. ROLLBACK ON FAILURE
  # ============================================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [detect-environment, verify]
    if: failure() && needs.detect-environment.outputs.environment == 'production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download backup
        uses: actions/download-artifact@v3
        with:
          name: config-backup-${{ github.run_id }}
          path: backups/
      
      - name: Restore configuration
        run: |
          # Restore backed up files
          for backup_file in backups/.env.*; do
            if [ -f "$backup_file" ]; then
              original_name=$(echo "$backup_file" | sed 's/\.20[0-9]\{6\}_[0-9]\{6\}$//')
              cp "$backup_file" "$original_name"
              echo "Restored: $original_name"
            fi
          done
      
      - name: Trigger rollback deployment
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_production }}
        run: |
          if [ -n "$RENDER_DEPLOY_HOOK" ]; then
            curl -X POST "$RENDER_DEPLOY_HOOK"
            echo "✅ Rollback deployment triggered"
          fi
      
      - name: Create rollback issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Rolled Back',
              body: 'The production deployment failed and was automatically rolled back.\n\n' +
                    `- **Commit:** ${context.sha}\n` +
                    `- **Branch:** ${context.ref}\n` +
                    `- **Run:** ${context.runId}`,
              labels: ['deployment', 'rollback', 'urgent']
            })

  # ============================================
  # 8. NOTIFICATION
  # ============================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [detect-environment, verify]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.verify.result }}" == "success" ]]; then
            echo "✅ Deployment successful!"
            STATUS="success"
          else
            echo "❌ Deployment failed!"
            STATUS="failure"
          fi
          
          echo "DEPLOYMENT_STATUS=$STATUS" >> $GITHUB_ENV
      
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"Deployment to ${{ needs.detect-environment.outputs.environment }}: ${{ env.DEPLOYMENT_STATUS }}\",
              \"attachments\": [{
                \"color\": \"${{ env.DEPLOYMENT_STATUS == 'success' && 'good' || 'danger' }}\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"${{ needs.detect-environment.outputs.environment }}\", \"short\": true},
                  {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true},
                  {\"title\": \"Actor\", \"value\": \"${{ github.actor }}\", \"short\": true}
                ]
              }]
            }"
