name: AI-Driven CI/CD Pipeline

on:
  push:
    branches: [development, staging, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  # Step 1: AI-Powered Code Analysis
  ai-analysis:
    name: ü§ñ AI Code Analysis
    runs-on: ubuntu-latest
    outputs:
      risk-level: ${{ steps.analyze.outputs.risk-level }}
      should-deploy: ${{ steps.analyze.outputs.should-deploy }}
      ai-summary: ${{ steps.analyze.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze Changes with Claude
        id: analyze
        run: |
          # Get diff between commits
          if [ "${{ github.event_name }}" == "push" ]; then
            # For push events, compare with previous commit
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              DIFF=$(git diff ${{ github.event.before }}..${{ github.sha }} || echo "First commit")
            else
              DIFF="First commit to branch"
            fi
          else
            # For manual triggers, check last commit
            DIFF=$(git show --format="" -p HEAD || echo "No changes")
          fi
          
          # Limit diff size to avoid API limits
          DIFF_SUMMARY=$(echo "$DIFF" | head -c 10000)
          
          # Send to Claude for analysis
          ANALYSIS=$(curl -s -X POST https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: ${{ env.ANTHROPIC_API_KEY }}" \
            -H "anthropic-version: 2023-06-01" \
            -d @- <<EOF | jq -r '.content[0].text' || echo '{"risk_level":"medium","should_deploy":true,"summary":"Analysis failed, proceeding with caution"}'
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 500,
            "messages": [{
              "role": "user",
              "content": "Analyze this git diff for deployment risks. Return ONLY valid JSON with: risk_level (low/medium/high/critical), should_deploy (true/false), summary (max 100 chars). Diff:\n\n$DIFF_SUMMARY"
            }]
          }
          EOF
          )
          
          # Parse JSON response
          echo "$ANALYSIS" > analysis.json
          RISK_LEVEL=$(echo "$ANALYSIS" | jq -r '.risk_level // "medium"')
          SHOULD_DEPLOY=$(echo "$ANALYSIS" | jq -r '.should_deploy // true')
          SUMMARY=$(echo "$ANALYSIS" | jq -r '.summary // "No summary available"' | head -c 100)
          
          echo "risk-level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
          
          echo "üìä Risk Level: $RISK_LEVEL"
          echo "üöÄ Should Deploy: $SHOULD_DEPLOY"
          echo "üìù Summary: $SUMMARY"

  # Step 2: Automated Testing
  testing:
    name: üß™ Automated Testing
    needs: ai-analysis
    if: needs.ai-analysis.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 || true
          
      - name: Run Linting
        continue-on-error: true
        run: |
          echo "Running code quality checks..."
          black --check . || echo "Black formatting check failed (non-blocking)"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run Tests
        id: test
        continue-on-error: true
        run: |
          echo "Running tests..."
          if [ -d "tests" ]; then
            pytest tests/ -v --tb=short || echo "Tests failed (non-blocking for now)"
          else
            echo "No tests directory found, skipping tests"
          fi

  # Step 3: Deploy to Environment
  deploy:
    name: üöÄ Deploy to ${{ github.ref_name }}
    needs: [ai-analysis, testing]
    if: needs.ai-analysis.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      deploy-status: ${{ steps.deployment.outputs.status }}
      service-url: ${{ steps.env.outputs.service-url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "render-service=srv-d2em4oripnbc73a5bmog" >> $GITHUB_OUTPUT
            echo "service-url=https://telbot-dev.onrender.com" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "render-service=srv-d2ftel8gjchc73aekca0" >> $GITHUB_OUTPUT
            echo "service-url=https://telbot-staging.onrender.com" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "render-service=srv-d2h9ckggjchc73bumn60" >> $GITHUB_OUTPUT
            echo "service-url=https://telbot-production.onrender.com" >> $GITHUB_OUTPUT
          fi
          
      - name: Trigger Render Deploy
        id: trigger
        run: |
          echo "üöÄ Triggering deployment for ${{ steps.env.outputs.environment }}..."
          
          RESPONSE=$(curl -s -X POST "https://api.render.com/v1/services/${{ steps.env.outputs.render-service }}/deploys" \
            -H "Authorization: Bearer ${{ env.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}')
          
          DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          
          if [ -z "$DEPLOY_ID" ]; then
            echo "‚ùå Failed to trigger deployment"
            echo "$RESPONSE"
            exit 1
          fi
          
          echo "deploy-id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment triggered: $DEPLOY_ID"
            
      - name: Wait for Deployment
        id: deployment
        run: |
          DEPLOY_ID="${{ steps.trigger.outputs.deploy-id }}"
          echo "‚è≥ Waiting for deployment $DEPLOY_ID to complete..."
          
          for i in {1..60}; do
            STATUS=$(curl -s "https://api.render.com/v1/services/${{ steps.env.outputs.render-service }}/deploys/$DEPLOY_ID" \
              -H "Authorization: Bearer ${{ env.RENDER_API_KEY }}" \
              | jq -r '.status // "unknown"')
            
            echo "Status check $i/60: $STATUS"
            
            if [[ "$STATUS" == "live" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "‚úÖ Deployment successful!"
              break
            elif [[ "$STATUS" == "build_failed" || "$STATUS" == "canceled" ]]; then
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "‚ùå Deployment failed with status: $STATUS"
              exit 1
            fi
            
            sleep 10
          done
          
          if [[ "$STATUS" != "live" ]]; then
            echo "status=timeout" >> $GITHUB_OUTPUT
            echo "‚è±Ô∏è Deployment timed out"
            exit 1
          fi

  # Step 4: Health Check
  health-check:
    name: üè• Health Check
    needs: deploy
    if: needs.deploy.outputs.deploy-status == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Service Startup
        run: sleep 30
        
      - name: Check Service Health
        id: health
        run: |
          URL="${{ needs.deploy.outputs.service-url }}"
          echo "üè• Checking health at $URL"
          
          # Try health endpoint first, fallback to root
          for endpoint in "/health" "/"; do
            for i in {1..5}; do
              echo "Attempt $i checking $URL$endpoint"
              if curl -f -s -o /dev/null -w "%{http_code}" "$URL$endpoint" | grep -q "^[23]"; then
                echo "‚úÖ Service is healthy!"
                exit 0
              fi
              sleep 10
            done
          done
          
          echo "‚ùå Health check failed"
          exit 1

  # Step 5: Notification
  notify:
    name: üì¢ Notify Status
    needs: [ai-analysis, deploy, health-check]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
            echo "status=Success" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.health-check.result }}" == "skipped" ]]; then
            echo "emoji=‚è≠Ô∏è" >> $GITHUB_OUTPUT
            echo "status=Skipped" >> $GITHUB_OUTPUT
          else
            echo "emoji=‚ùå" >> $GITHUB_OUTPUT
            echo "status=Failed" >> $GITHUB_OUTPUT
          fi
          
      - name: Send Telegram Notification
        if: env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != ''
        run: |
          MESSAGE="${{ steps.status.outputs.emoji }} *Deployment ${{ steps.status.outputs.status }}*
          
          üìç Environment: ${{ github.ref_name }}
          üìä Risk Level: ${{ needs.ai-analysis.outputs.risk-level }}
          ü§ñ AI Summary: ${{ needs.ai-analysis.outputs.ai-summary }}
          üë§ Author: ${{ github.actor }}
          üîó Commit: \`${{ github.sha }}\`
          
          [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=true" || echo "Telegram notification failed"