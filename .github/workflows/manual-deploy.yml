name: Manual Deployment Override

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      reason:
        description: 'Reason for manual deployment'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests (DANGEROUS)'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment even with AI warnings'
        required: false
        type: boolean
        default: false

jobs:
  manual-deploy:
    name: üö® Manual Deployment to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log deployment reason
        run: |
          echo "### üö® Manual Deployment Initiated" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Initiated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Skip tests:** ${{ inputs.skip_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "**Force deploy:** ${{ inputs.force_deploy }}" >> $GITHUB_STEP_SUMMARY

      - name: Run tests
        if: ${{ inputs.skip_tests != true }}
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          
          mkdir -p tests
          pytest tests/ -v --tb=short || {
            if [[ "${{ inputs.force_deploy }}" == "true" ]]; then
              echo "‚ö†Ô∏è Tests failed but force deploy enabled"
            else
              echo "‚ùå Tests failed. Use force_deploy to override"
              exit 1
            fi
          }

      - name: Determine service
        id: service
        run: |
          case "${{ inputs.environment }}" in
            development)
              echo "service_id=srv-d2em4oripnbc73a5bmog" >> $GITHUB_OUTPUT
              echo "url=https://telbot-dev.onrender.com" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "service_id=srv-d2ftel8gjchc73aekca0" >> $GITHUB_OUTPUT
              echo "url=https://telbot-staging.onrender.com" >> $GITHUB_OUTPUT
              ;;
            production)
              echo "service_id=srv-d2elp8qdbo4c738ir500" >> $GITHUB_OUTPUT
              echo "url=https://telbot-f4on.onrender.com" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "üöÄ Deploying to ${{ inputs.environment }}..."
          
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ steps.service.outputs.service_id }}/deploys" \
            -d '{"clearCache": false}'
          
          echo "‚úÖ Deployment triggered"

      - name: Send notifications
        env:
          TELEGRAM_BOT_TOKEN: ${{ inputs.environment == 'production' && secrets.TELEGRAM_BOT_TOKEN_PROD || secrets.TELEGRAM_BOT_TOKEN_DEV }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="üö® MANUAL DEPLOYMENT%0A%0A"
          MESSAGE="${MESSAGE}Environment: ${{ inputs.environment }}%0A"
          MESSAGE="${MESSAGE}Reason: ${{ inputs.reason }}%0A"
          MESSAGE="${MESSAGE}By: ${{ github.actor }}%0A"
          MESSAGE="${MESSAGE}Tests: ${{ inputs.skip_tests && 'SKIPPED ‚ö†Ô∏è' || 'Passed ‚úÖ' }}%0A"
          MESSAGE="${MESSAGE}URL: ${{ steps.service.outputs.url }}"
          
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=HTML"

      - name: Create audit log
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Manual Deployment to ${context.payload.inputs.environment}`,
              body: `## Manual Deployment Log
              
              **Environment:** ${context.payload.inputs.environment}
              **Reason:** ${context.payload.inputs.reason}
              **Initiated by:** ${context.actor}
              **Timestamp:** ${new Date().toISOString()}
              **Skip tests:** ${context.payload.inputs.skip_tests}
              **Force deploy:** ${context.payload.inputs.force_deploy}
              
              This is an audit log for manual deployment.`,
              labels: ['deployment', 'manual', context.payload.inputs.environment]
            });
