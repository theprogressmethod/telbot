#!/bin/bash
#
# Git Pre-Commit Hook - Claude Orchestra Safety System
# WORKER_3 PREP-001C Implementation
#
# This hook prevents commits that would violate orchestration safety rules:
# - Blocks modifications to protected orchestration files
# - Validates protected branch commits
# - Detects large file additions (>10MB)
# - Scans for credentials/secrets
#

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration paths
ORCHESTRA_DIR=".claude-orchestra"
CONFIG_FILE="$ORCHESTRA_DIR/git-safety/config/git-safety-config.yaml"
PROTECTED_PATHS_FILE="$ORCHESTRA_DIR/git-safety/config/protected-paths.txt"
BOUNDARY_CHECK_SCRIPT="$ORCHESTRA_DIR/scripts/git-boundary-check.py"

echo -e "${BLUE}üîí Claude Orchestra Git Safety - Pre-Commit Hook${NC}"
echo "================================================"

# Check if configuration files exist
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Git safety config not found: $CONFIG_FILE${NC}"
    echo "Proceeding with basic safety checks..."
fi

# Function to check file size
check_file_size() {
    local file="$1"
    local max_size=10485760  # 10MB in bytes
    
    if [ -f "$file" ]; then
        local file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
        if [ "$file_size" -gt "$max_size" ]; then
            echo -e "${RED}‚ùå Large file detected: $file (${file_size} bytes > 10MB)${NC}"
            echo -e "${YELLOW}üí° Large files should not be committed to orchestration repository${NC}"
            return 1
        fi
    fi
    return 0
}

# Function to check for secrets/credentials
check_for_secrets() {
    local file="$1"
    local secrets_found=0
    
    # Skip binary files
    if file "$file" | grep -q "binary"; then
        return 0
    fi
    
    # Patterns to detect secrets
    local secret_patterns=(
        "api[_-]?key.*[=:].*['\"][a-zA-Z0-9]{20,}['\"]"
        "secret.*[=:].*['\"][a-zA-Z0-9]{20,}['\"]"
        "password.*[=:].*['\"][^'\"]{8,}['\"]"
        "token.*[=:].*['\"][a-zA-Z0-9]{20,}['\"]"
        "sk-[a-zA-Z0-9]{48}"
        "eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*"
    )
    
    for pattern in "${secret_patterns[@]}"; do
        if grep -qiE "$pattern" "$file" 2>/dev/null; then
            echo -e "${RED}‚ùå Potential secret/credential detected in: $file${NC}"
            echo -e "${YELLOW}üí° Pattern matched: ${pattern}${NC}"
            secrets_found=1
        fi
    done
    
    return $secrets_found
}

# Function to check protected paths
check_protected_paths() {
    local file="$1"
    
    # Default protected paths if config file doesn't exist
    local default_protected_paths=(
        ".claude-orchestra/control/"
        ".claude-orchestra/status/"
        ".claude-orchestra/logs/"
        "production/"
        "config/"
        ".env.production"
        ".env.staging"
    )
    
    # Check against protected paths
    for protected_path in "${default_protected_paths[@]}"; do
        if [[ "$file" == "$protected_path"* ]]; then
            echo -e "${RED}‚ùå Protected path modification detected: $file${NC}"
            echo -e "${YELLOW}üí° Path '$protected_path' is protected by orchestration system${NC}"
            return 1
        fi
    done
    
    # If protected paths file exists, check it too
    if [ -f "$PROTECTED_PATHS_FILE" ]; then
        while IFS= read -r protected_path; do
            # Skip empty lines and comments
            [[ -z "$protected_path" || "$protected_path" =~ ^[[:space:]]*# ]] && continue
            
            if [[ "$file" == "$protected_path"* ]]; then
                echo -e "${RED}‚ùå Protected path modification detected: $file${NC}"
                echo -e "${YELLOW}üí° Path '$protected_path' is protected by configuration${NC}"
                return 1
            fi
        done < "$PROTECTED_PATHS_FILE"
    fi
    
    return 0
}

# Function to validate orchestration modifications
validate_orchestration_changes() {
    local file="$1"
    
    # If it's an orchestration file, perform additional checks
    if [[ "$file" == "$ORCHESTRA_DIR/"* ]]; then
        # Check if boundary check script exists and run it
        if [ -f "$BOUNDARY_CHECK_SCRIPT" ]; then
            if ! python3 "$BOUNDARY_CHECK_SCRIPT" "$file"; then
                echo -e "${RED}‚ùå Orchestration boundary check failed for: $file${NC}"
                return 1
            fi
        fi
        
        echo -e "${YELLOW}‚ö†Ô∏è  Orchestration file change detected: $file${NC}"
        echo -e "${BLUE}üîç Ensure this change is part of assigned worker task${NC}"
    fi
    
    return 0
}

# Main validation logic
echo -e "${BLUE}üîç Checking staged files for safety violations...${NC}"

# Get list of staged files
staged_files=$(git diff --cached --name-only)

if [ -z "$staged_files" ]; then
    echo -e "${GREEN}‚úÖ No files staged for commit${NC}"
    exit 0
fi

violations_found=0

echo -e "${BLUE}üìã Validating files:${NC}"
for file in $staged_files; do
    echo -n "  ‚Ä¢ $file ... "
    
    file_violations=0
    
    # Check file size
    if ! check_file_size "$file"; then
        file_violations=1
    fi
    
    # Check for secrets
    if ! check_for_secrets "$file"; then
        file_violations=1
    fi
    
    # Check protected paths
    if ! check_protected_paths "$file"; then
        file_violations=1
    fi
    
    # Validate orchestration changes
    if ! validate_orchestration_changes "$file"; then
        file_violations=1
    fi
    
    if [ $file_violations -eq 0 ]; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${RED}‚ùå${NC}"
        violations_found=1
    fi
done

echo ""

# Check current branch protection
current_branch=$(git branch --show-current)
protected_branches=("main" "production" "staging" "master")

for protected_branch in "${protected_branches[@]}"; do
    if [ "$current_branch" = "$protected_branch" ]; then
        echo -e "${RED}‚ùå Direct commits to protected branch '$protected_branch' are not allowed${NC}"
        echo -e "${YELLOW}üí° Please create a feature branch and submit a pull request${NC}"
        violations_found=1
    fi
done

# Final result
if [ $violations_found -eq 1 ]; then
    echo -e "${RED}================================================${NC}"
    echo -e "${RED}‚ùå Pre-commit hook FAILED - Safety violations detected${NC}"
    echo -e "${YELLOW}üí° Please fix the issues above and try again${NC}"
    echo -e "${BLUE}üÜò For emergency override: .claude-orchestra/git-safety/scripts/emergency-override.sh${NC}"
    echo -e "${RED}================================================${NC}"
    exit 1
else
    echo -e "${GREEN}================================================${NC}"
    echo -e "${GREEN}‚úÖ Pre-commit hook PASSED - No safety violations${NC}"
    echo -e "${GREEN}üöÄ Commit can proceed safely${NC}"
    echo -e "${GREEN}================================================${NC}"
    exit 0
fi