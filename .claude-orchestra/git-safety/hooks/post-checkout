#!/bin/bash
#
# Git Post-Checkout Hook - Claude Orchestra Safety System
# WORKER_3 PREP-001C Implementation
#
# This hook runs after a successful checkout to:
# - Validate branch safety after switch
# - Update worker status for branch changes
# - Check for branch-specific orchestration rules
# - Log branch switching activities
#

set -e

# Colors for output (lighter for post hooks)
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration paths
ORCHESTRA_DIR=".claude-orchestra"
LOGS_DIR="$ORCHESTRA_DIR/logs"
STATUS_DIR="$ORCHESTRA_DIR/status"
CONFIG_FILE="$ORCHESTRA_DIR/git-safety/config/git-safety-config.yaml"

echo -e "${BLUE}🔄 Claude Orchestra - Post-Checkout Hook${NC}"

# Hook arguments from Git
prev_head="$1"
new_head="$2" 
branch_checkout="$3"  # 1 if branch checkout, 0 if file checkout

# Only process branch checkouts
if [ "$branch_checkout" != "1" ]; then
    echo -e "${BLUE}📁 File checkout detected - no branch validation needed${NC}"
    exit 0
fi

# Ensure log directories exist
mkdir -p "$LOGS_DIR" 2>/dev/null || true
mkdir -p "$STATUS_DIR" 2>/dev/null || true

# Get branch information
current_branch=$(git branch --show-current)
prev_branch=$(git name-rev --name-only "$prev_head" 2>/dev/null || echo "unknown")

echo -e "${BLUE}🔄 Branch switch detected: $prev_branch → $current_branch${NC}"

# Log the branch switch
ORCHESTRATION_LOG="$LOGS_DIR/orchestration.log"
echo "[$(date '+%Y-%m-%d %H:%M:%S')] BRANCH_SWITCH: $prev_branch → $current_branch" >> "$ORCHESTRATION_LOG"

# Function to check branch safety rules
check_branch_safety() {
    local branch="$1"
    local safety_violations=0
    
    # Protected branches that may have special restrictions
    local protected_branches=("main" "production" "staging" "master")
    
    # Check if switching to a protected branch
    for protected in "${protected_branches[@]}"; do
        if [ "$branch" = "$protected" ]; then
            echo -e "${YELLOW}⚠️  Switched to protected branch: $branch${NC}"
            echo -e "${BLUE}💡 Remember: Direct commits to protected branches may be restricted${NC}"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] PROTECTED_BRANCH_CHECKOUT: $branch" >> "$ORCHESTRATION_LOG"
            break
        fi
    done
    
    # Check for branch naming conventions
    if echo "$branch" | grep -qE "^(feature|bugfix|hotfix|task)\/"; then
        echo -e "${GREEN}✅ Branch follows naming convention: $branch${NC}"
    elif echo "$branch" | grep -qE "^(main|master|production|staging|development)$"; then
        # Main branches are acceptable
        echo -e "${BLUE}📋 Main branch checkout: $branch${NC}"
    else
        echo -e "${YELLOW}💡 Branch name doesn't follow convention (feature/task/bugfix/hotfix): $branch${NC}"
    fi
    
    return $safety_violations
}

# Function to update worker status for branch changes
update_worker_status() {
    local new_branch="$1"
    
    # Check if there's an active worker
    if [ -f "$STATUS_DIR/active-worker.md" ]; then
        current_worker=$(grep "CURRENT_WORKER:" "$STATUS_DIR/active-worker.md" 2>/dev/null | cut -d':' -f2 | tr -d ' ')
        
        if [ "$current_worker" != "NONE" ] && [ -n "$current_worker" ]; then
            echo -e "${YELLOW}⚠️  Active worker detected during branch switch: $current_worker${NC}"
            echo -e "${BLUE}💡 Worker may need to be aware of branch change${NC}"
            
            # Log worker activity
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $current_worker BRANCH_CHANGE: Switched to $new_branch" >> "$LOGS_DIR/recent-work.log"
            
            # Check if worker has branch-specific restrictions
            if echo "$new_branch" | grep -qE "^(main|production)$"; then
                echo -e "${YELLOW}⚠️  Worker $current_worker is now on restricted branch: $new_branch${NC}"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] $current_worker WARNING: Working on restricted branch $new_branch" >> "$ORCHESTRATION_LOG"
            fi
        fi
    fi
}

# Function to validate orchestration state after branch switch
validate_orchestration_state() {
    local branch="$1"
    
    # Check if orchestration files exist and are consistent
    local critical_files=(
        "$ORCHESTRA_DIR/status/task-queue.md"
        "$ORCHESTRA_DIR/status/active-worker.md"
    )
    
    for file in "${critical_files[@]}"; do
        if [ ! -f "$file" ]; then
            echo -e "${YELLOW}⚠️  Critical orchestration file missing after checkout: $file${NC}"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] MISSING_FILE: $file not found after checkout to $branch" >> "$ORCHESTRATION_LOG"
        fi
    done
    
    # Check for emergency stop state
    if [ -f "$ORCHESTRA_DIR/control/emergency-stop.flag" ]; then
        echo -e "${RED}🚨 Emergency stop is active - operations may be restricted${NC}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] EMERGENCY_STOP: Active during checkout to $branch" >> "$ORCHESTRATION_LOG"
    fi
}

# Function to check for branch-specific hooks or configurations
check_branch_specific_config() {
    local branch="$1"
    
    # Look for branch-specific git safety configuration
    branch_config="$ORCHESTRA_DIR/git-safety/config/branches/$branch.yaml"
    if [ -f "$branch_config" ]; then
        echo -e "${BLUE}📋 Branch-specific configuration found: $branch_config${NC}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] BRANCH_CONFIG: Using specific config for $branch" >> "$ORCHESTRATION_LOG"
    fi
    
    # Check for branch-specific protected paths
    branch_paths="$ORCHESTRA_DIR/git-safety/config/branches/$branch-protected-paths.txt"
    if [ -f "$branch_paths" ]; then
        echo -e "${BLUE}📋 Branch-specific protected paths found: $branch_paths${NC}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] BRANCH_PATHS: Using specific protected paths for $branch" >> "$ORCHESTRATION_LOG"
    fi
}

# Function to sync orchestration files if needed
sync_orchestration_files() {
    local branch="$1"
    
    # Check if there are orchestration files that differ between branches
    if git diff --name-only "$prev_head" "$new_head" | grep -q "^$ORCHESTRA_DIR/"; then
        echo -e "${YELLOW}⚠️  Orchestration files changed during branch switch${NC}"
        echo -e "${BLUE}🔍 Files changed:${NC}"
        
        changed_orchestra_files=$(git diff --name-only "$prev_head" "$new_head" | grep "^$ORCHESTRA_DIR/" || echo "")
        for file in $changed_orchestra_files; do
            echo "  • $file"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] ORCHESTRATION_CHANGE: $file changed during checkout to $branch" >> "$ORCHESTRATION_LOG"
        done
        
        echo -e "${BLUE}💡 Consider reviewing orchestration changes${NC}"
    fi
}

# Main validation sequence
echo -e "${BLUE}🔍 Validating branch safety after checkout...${NC}"

# Run safety checks
check_branch_safety "$current_branch"

# Update worker status
update_worker_status "$current_branch"

# Validate orchestration state
validate_orchestration_state "$current_branch"

# Check for branch-specific configuration
check_branch_specific_config "$current_branch"

# Sync orchestration files if needed
sync_orchestration_files "$current_branch"

# Create checkout summary
checkout_summary_file="$LOGS_DIR/checkout-summary.log"
{
    echo "CHECKOUT: $prev_head → $new_head"
    echo "BRANCH: $prev_branch → $current_branch"  
    echo "DATE: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "TYPE: branch_checkout"
    echo "---"
} >> "$checkout_summary_file"

# Log completion
echo "[$(date '+%Y-%m-%d %H:%M:%S')] POST_CHECKOUT: Branch switch validation completed for $current_branch" >> "$ORCHESTRATION_LOG"

# Cleanup old log entries (keep last 500 entries)
if [ -f "$checkout_summary_file" ]; then
    tail -500 "$checkout_summary_file" > "${checkout_summary_file}.tmp" 2>/dev/null || true
    mv "${checkout_summary_file}.tmp" "$checkout_summary_file" 2>/dev/null || true
fi

echo -e "${GREEN}✅ Post-checkout branch validation completed${NC}"
echo -e "${BLUE}🎯 Current branch: $current_branch${NC}"

# Exit successfully (post hooks should not block)
exit 0